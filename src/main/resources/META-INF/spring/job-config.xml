<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"	
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:task="http://www.springframework.org/schema/task"	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	
	http://www.springframework.org/schema/beans/spring-beans.xsd 	
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/batch 
    http://www.springframework.org/schema/batch/spring-batch.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd">
	
	<context:component-scan base-package="com.waverley.byrsp.dashboard" />

    <!-- Batch Job definition -->
    <batch:job id="byrspDashboardJob" xmlns="http://www.springframework.org/schema/batch" restartable="true">
        <batch:step id="dataExportImport" allow-start-if-complete="true">
            <batch:tasklet>
                <batch:chunk reader="itemMySqlReader" processor="itemProcessor" writer="itemMsSqlWriter"
                             chunk-completion-policy="batchJobCompletionPolicy" />
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <!-- Here we are reading the data from MySQL Server -->
    <bean id="itemMySqlReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" scope="step">
        <property name="dataSource" ref="dataSource" />
        <property name="sql" value="select trade_id, order_id, retailer_id, retailer,
                        url, buyer, price, tax, shipping_fee, shipping_address, coupon,
                        status, create_time, last_update_time, done_time, memo, logs,
                        screenshot, partner_id, email, test_status, error_message from _order" />
        <property name="rowMapper">
            <bean class="com.waverley.byrsp.dashboard.mapper.OrderMapper" />
        </property>

    </bean>

    <!-- Item Processor to get only data available since yesterday -->
    <bean id="itemProcessor" class="com.waverley.byrsp.dashboard.utils.OrderItemProcessor">
        <!-- number of seconds to minus by current date -->
        <property name="margin" value="86400" />
    </bean>

    <!-- Here we 're writing the result directly to Microsoft SQL Server -->
    <bean id="itemMsSqlWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataDestination" />
        <property name="sql">
            <value>
                <![CDATA[
                   insert into _order (trade_id, order_id, retailer_id, retailer, url, buyer,
                                price, tax, shipping_fee, shipping_address, coupon, status,
                                create_time,last_update_time, done_time, memo, logs,
                                screenshot, partner_id, email, test_status, error_message)
                   values (:tradeId, :orderId, :retailerId, :retailer, :url, :buyer,
                            :price, :tax, :shippingFee, :shippingAddress, :coupon, :status,
                            :createTime, :lastUpdateTime, :doneTime, :memo, :logs,
                            :screenshot, :partnerId, :email, :testStatus, :errorMessage)
                ]]>
            </value>
        </property>
        <property name="itemSqlParameterSourceProvider">
            <bean class="com.waverley.byrsp.dashboard.model.Order" />
        </property>
    </bean>

    <!-- Complete policy -->
    <bean id="batchJobCompletionPolicy"
          class="org.springframework.batch.repeat.policy.DefaultResultCompletionPolicy" />

    <bean id="myScheduler" class="com.waverley.byrsp.dashboard.utils.DbSyncScheduler" />
	<!-- this is where we are scheduling the job to run using our scheduler every 5 secs, note how the method of the
	     scheduler and the cron expression to be used are being specified -->
	<task:scheduled-tasks>
        <!-- The cron job runs every day at 1:00 A.M -->
		<task:scheduled ref="myScheduler" method="run" cron="*/5 * * * * *" />
	</task:scheduled-tasks>
</beans>